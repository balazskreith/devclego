~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  cmp_foo.h
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#ifndef CMP_FOO_H_
#define CMP_FOO_H_

//--------------------------------------------------
//foo component begins (cmp_foo)
//----------------------------------------------------
#define CMP_NAME_FOO "foo component"
typedef struct cmp_foo_struct_t
{
	void             (*receiver)(bar_t*);
	void             (*send)(bar_t*);
	//void             (*start)();
	//void             (*stop)();
}cmp_foo_t;
//--------------------------------------------------
//foo component ends (cmp_foo)
//----------------------------------------------------


void cmp_foo_ctor();
void cmp_foo_dtor();
cmp_foo_t* get_cmp_foo();

#endif /* CMP_FOO_H_ */

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                  cmp_foo.c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//----------------------------------------------------------------------------------------------------
//------------------------- Private type definitions -------------------------------------
//----------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------
//---------------------------- Component definitions ----------------------------------------------------
//----------------------------------------------------------------------------------------------------

static void _cmp_foo_init();
static void _cmp_foo_deinit();
static void _cmp_foo_receiver(bar_t* item);
CMP_DEF(, 			           //type of definitions
		cmp_foo_t,       	       //type of component
		CMP_NAME_FOO,            //name of the component
		 _cmp_foo,               //variable name of the component
		 cmp_foo_ctor,           //name of the constructor process implemented automatically
		 cmp_foo_dtor,           //name of the destructor process implemented automatically
		 _cmp_foo_init,          //name of the external process called after construction
		 __NO_TEST_FUNC_,      //name of the external process called after initialization
		 _cmp_foo_deinit         //name of the external process called before destruction
		);

CMP_DEF_GET_PROC(get_cmp_foo, cmp_foo_t, _cmp_foo);

//----------------------------------------------------------------------------------------------------
//------------------------- Private functions definitions -------------------------------------
//----------------------------------------------------------------------------------------------------
static void _private_func_example();

//----------------------------------------------------------------------------------------------------
//------------------------- Initializations  ---------------------------------------------------------
//----------------------------------------------------------------------------------------------------

void  _cmp_A_init()
{
	//constructions
	//Put here the subcomponent constructors. i.e.: _cmp_puffer_ctor();

	//Binding
	//Functions belongs to the component are bound functions. i.e:
	CMP_BIND(_cmp_foo->receiver, _cmp_foo_receiver);

	//Connecting
	//Functions 
	CMP_CONNECT(_cmp_A->receiver, _cmp_Apuffer->receiver);

}

void  _cmp_A_deinit()
{
	//destructing
	_cmp_Apuffer_dtor();
}

//----------------------------------------------------------------------------------------------------
//------------------------- Component Processes -------------------------------------
//----------------------------------------------------------------------------------------------------

void _cmp_foo_receiver(bar_t *item)
{
	CMP_DEF_THIS(cmp_foo_t, _cmp_foo);
	
	this->send(item);
}

//----------------------------------------------------------------------------------------------------
//------------------------- Private functions -------------------------------------
//----------------------------------------------------------------------------------------------------

void _private_func_example()
{
	
}